import tkinter as tk
from tkinter import messagebox
from datetime import datetime

def calculate_bmi(weight, height):
    try:
        bmi = weight / (height ** 2)
        return bmi
    except ZeroDivisionError:
        return "Height cannot be zero."

def bmi_category(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 24.9:
        return "Normal weight"
    elif 25 <= bmi < 29.9:
        return "Overweight"
    else:
        return "Obesity"

def health_advice(category):
    advice = {
        "Underweight": "Consider gaining weight through a healthy diet rich in nutrients and regular strength training exercises.",
        "Normal weight": "Maintain your weight through a balanced diet and regular physical activity.",
        "Overweight": "Consider losing weight through a balanced diet and regular exercise. Monitor portion sizes and avoid high-calorie foods.",
        "Obesity": "Consult a healthcare provider for a personalized plan. Focus on a balanced diet, regular exercise, and potentially behavioral therapy."
    }
    return advice.get(category, "")

def convert_units(weight, weight_unit, height, height_unit):
    if weight_unit == "lbs":
        weight = weight * 0.453592  # Convert pounds to kilograms
    if height_unit == "cm":
        height = height / 100  # Convert centimeters to meters
    elif height_unit == "in":
        height = height * 0.0254  # Convert inches to meters
    return weight, height

def log_bmi(weight, height, bmi, category):
    with open("bmi_log.txt", "a") as file:
        file.write(f"{datetime.now()}: Weight: {weight:.2f} kg, Height: {height:.2f} m, BMI: {bmi:.2f}, Category: {category}\n")

def calculate_and_display_bmi():
    try:
        weight = float(weight_entry.get())
        weight_unit = weight_unit_var.get()
        height = float(height_entry.get())
        height_unit = height_unit_var.get()

        if weight <= 0 or height <= 0:
            raise ValueError("Weight and height must be positive values.")

        weight, height = convert_units(weight, weight_unit, height, height_unit)
        bmi = calculate_bmi(weight, height)

        if isinstance(bmi, str):
            messagebox.showerror("Error", bmi)
        else:
            category = bmi_category(bmi)
            advice = health_advice(category)
            log_bmi(weight, height, bmi, category)

            result_text = f"Your BMI is: {bmi:.2f}\nCategory: {category}\nHealth Advice: {advice}"
            result_label.config(text=result_text)
    except ValueError as e:
        messagebox.showerror("Error", f"Invalid input: {e}")
    except Exception as e:
        messagebox.showerror("Error", f"An unexpected error occurred: {e}")

def reset_fields():
    weight_entry.delete(0, tk.END)
    height_entry.delete(0, tk.END)
    result_label.config(text="")

def validate_input(P):
    if P == "" or P.isdigit() or P.replace(".", "", 1).isdigit():
        return True
    else:
        return False

# GUI Setup
root = tk.Tk()
root.title("BMI Calculator")

validate_command = root.register(validate_input)

tk.Label(root, text="Enter your weight:").grid(row=0, column=0)
weight_entry = tk.Entry(root, validate="key", validatecommand=(validate_command, '%P'))
weight_entry.grid(row=0, column=1)

weight_unit_var = tk.StringVar(value="kg")
tk.Radiobutton(root, text="kg", variable=weight_unit_var, value="kg").grid(row=0, column=2)
tk.Radiobutton(root, text="lbs", variable=weight_unit_var, value="lbs").grid(row=0, column=3)

tk.Label(root, text="Enter your height:").grid(row=1, column=0)
height_entry = tk.Entry(root, validate="key", validatecommand=(validate_command, '%P'))
height_entry.grid(row=1, column=1)

height_unit_var = tk.StringVar(value="m")
tk.Radiobutton(root, text="m", variable=height_unit_var, value="m").grid(row=1, column=2)
tk.Radiobutton(root, text="cm", variable=height_unit_var, value="cm").grid(row=1, column=3)
tk.Radiobutton(root, text="in", variable=height_unit_var, value="in").grid(row=1, column=4)

tk.Button(root, text="Calculate BMI", command=calculate_and_display_bmi).grid(row=2, column=1)
tk.Button(root, text="Reset", command=reset_fields).grid(row=2, column=2)

result_label = tk.Label(root, text="", wraplength=300)
result_label.grid(row=3, columnspan=5)

tk.Label(root, text="BMI Categories:").grid(row=4, columnspan=5)
tk.Label(root, text="Underweight: < 18.5").grid(row=5, columnspan=5)
tk.Label(root, text="Normal weight: 18.5 - 24.9").grid(row=6, columnspan=5)
tk.Label(root, text="Overweight: 25 - 29.9").grid(row=7, columnspan=5)
tk.Label(root, text="Obesity: >= 30").grid(row=8, columnspan=5)

root.mainloop()

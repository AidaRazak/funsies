import tkinter as tk
from tkinter import messagebox, filedialog, ttk
from datetime import datetime

def calculate_bmi(weight, height):
    try:
        bmi = weight / (height ** 2)
        return round(bmi, 2)
    except ZeroDivisionError:
        return "Height cannot be zero."

def bmi_category(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 24.9:
        return "Normal weight"
    elif 25 <= bmi < 29.9:
        return "Overweight"
    else:
        return "Obesity"

def health_advice(category, age):
    advice = {
        "Underweight": "Gain weight through a nutrient-rich diet and strength exercises.",
        "Normal weight": "Maintain with balanced diet and regular activity.",
        "Overweight": "Reduce weight with a balanced diet, and monitor calories.",
        "Obesity": "Consult a healthcare provider for a personalized plan."
    }
    if age < 18:
        return f"As you're {age}, growing children need balanced nutrition."
    return advice.get(category, "")

def convert_units(weight, weight_unit, height, height_unit):
    if weight_unit == "lbs":
        weight = weight * 0.453592
    if height_unit == "cm":
        height = height / 100
    elif height_unit == "in":
        height = height * 0.0254
    return weight, height

def log_bmi(name, weight, height, bmi, category):
    with open("bmi_log.txt", "a") as file:
        file.write(f"{datetime.now()}: {name}, Weight: {weight:.2f} kg, Height: {height:.2f} m, BMI: {bmi:.2f}, Category: {category}\n")

def calculate_and_display_bmi():
    try:
        name = name_entry.get()
        age = int(age_entry.get())
        weight = float(weight_entry.get())
        weight_unit = weight_unit_var.get()
        height = float(height_entry.get())
        height_unit = height_unit_var.get()

        if weight <= 0 or height <= 0 or age <= 0:
            raise ValueError("Weight, height, and age must be positive values.")

        weight, height = convert_units(weight, weight_unit, height, height_unit)
        bmi = calculate_bmi(weight, height)

        if isinstance(bmi, str):
            messagebox.showerror("Error", bmi)
        else:
            category = bmi_category(bmi)
            advice = health_advice(category, age)
            log_bmi(name, weight, height, bmi, category)

            result_text = f"Your BMI: {bmi}\nCategory: {category}\nAdvice: {advice}"
            result_label.config(text=result_text)
            display_bmi_graph(bmi)
    except ValueError as e:
        messagebox.showerror("Error", f"Invalid input: {e}")
    except Exception as e:
        messagebox.showerror("Error", f"An unexpected error occurred: {e}")

def display_bmi_graph(bmi):
    canvas.delete("all")
    width = 300
    categories = ["Underweight", "Normal weight", "Overweight", "Obesity"]
    colors = ["#ADD8E6", "#90EE90", "#FFD700", "#FF6347"]
    thresholds = [18.5, 24.9, 29.9]
    x = 0
    for i, category in enumerate(categories):
        category_width = (thresholds[i] / 40) * width if i < len(thresholds) else width - x
        canvas.create_rectangle(x, 0, x + category_width, 30, fill=colors[i])
        x += category_width

    bmi_position = (bmi / 40) * width
    canvas.create_line(bmi_position, 0, bmi_position, 30, fill="black", width=2)
    canvas.create_text(bmi_position, 15, text=f"BMI: {bmi:.2f}", anchor=tk.SW)

def reset_fields():
    name_entry.delete(0, tk.END)
    age_entry.delete(0, tk.END)
    weight_entry.delete(0, tk.END)
    height_entry.delete(0, tk.END)
    result_label.config(text="")
    canvas.delete("all")

# GUI Setup
root = tk.Tk()
root.title("BMI Calculator with Extras")

# Input Fields
input_frame = ttk.Frame(root, padding="10")
input_frame.grid(row=0, column=0)

ttk.Label(input_frame, text="Name:").grid(row=0, column=0)
name_entry = ttk.Entry(input_frame)
name_entry.grid(row=0, column=1)

ttk.Label(input_frame, text="Age:").grid(row=1, column=0)
age_entry = ttk.Entry(input_frame)
age_entry.grid(row=1, column=1)

ttk.Label(input_frame, text="Weight:").grid(row=2, column=0)
weight_entry = ttk.Entry(input_frame)
weight_entry.grid(row=2, column=1)

weight_unit_var = tk.StringVar(value="kg")
ttk.Radiobutton(input_frame, text="kg", variable=weight_unit_var, value="kg").grid(row=2, column=2)
ttk.Radiobutton(input_frame, text="lbs", variable=weight_unit_var, value="lbs").grid(row=2, column=3)

ttk.Label(input_frame, text="Height:").grid(row=3, column=0)
height_entry = ttk.Entry(input_frame)
height_entry.grid(row=3, column=1)

height_unit_var = tk.StringVar(value="m")
ttk.Radiobutton(input_frame, text="m", variable=height_unit_var, value="m").grid(row=3, column=2)
ttk.Radiobutton(input_frame, text="cm", variable=height_unit_var, value="cm").grid(row=3, column=3)
ttk.Radiobutton(input_frame, text="in", variable=height_unit_var, value="in").grid(row=3, column=4)

# Buttons
ttk.Button(input_frame, text="Calculate BMI", command=calculate_and_display_bmi).grid(row=4, column=0, pady=10)
ttk.Button(input_frame, text="Reset", command=reset_fields).grid(row=4, column=1)

# Result Display
result_label = ttk.Label(root, text="")
result_label.grid(row=2, column=0, pady=10)

# Canvas for Graph
canvas = tk.Canvas(root, width=300, height=30)
canvas.grid(row=3, column=0, pady=10)

root.mainloop()

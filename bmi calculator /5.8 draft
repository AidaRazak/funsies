import tkinter as tk
from tkinter import messagebox, filedialog, ttk
from datetime import datetime

# Utility functions
def calculate_bmi(weight, height):
    return round(weight / (height ** 2), 2) if height else None

def get_bmi_category(bmi):
    return ["Underweight", "Normal weight", "Overweight", "Obesity"][(18.5 <= bmi <= 24.9) + (24.9 < bmi <= 29.9) + (29.9 < bmi)]

def convert_units(weight, height, weight_unit, height_unit):
    if weight_unit == "lbs": weight *= 0.453592
    if height_unit == "cm": height /= 100
    elif height_unit == "in": height *= 0.0254
    return weight, height

def log_bmi(name, weight, height, bmi, category):
    with open("bmi_log.txt", "a") as file:
        file.write(f"{datetime.now()}: {name}, {weight:.2f} kg, {height:.2f} m, BMI: {bmi:.2f}, {category}\n")

def save_log_file():
    file_path = filedialog.asksaveasfilename(defaultextension=".txt")
    if file_path:
        with open("bmi_log.txt", "r") as src, open(file_path, "w") as dst:
            dst.write(src.read())

def update_profile_list():
    try:
        with open("bmi_log.txt", "r") as file:
            profiles = {line.split(",")[1].split(":")[1].strip() for line in file}
        profile_combo['values'] = list(profiles)
    except FileNotFoundError:
        messagebox.showwarning("Warning", "No log file found to load profiles.")

def calculate_and_display_bmi():
    try:
        name = name_entry.get().strip()
        weight, height = float(weight_entry.get()), float(height_entry.get())
        if not name or weight <= 0 or height <= 0:
            raise ValueError("Invalid input values.")

        weight, height = convert_units(weight, height, weight_unit.get(), height_unit.get())
        bmi = calculate_bmi(weight, height)
        if not bmi:
            raise ValueError("Height must be greater than zero.")
        
        category = get_bmi_category(bmi)
        log_bmi(name, weight, height, bmi, category)
        result_label.config(text=f"BMI: {bmi}, {category}")
        update_profile_list()
        display_bmi_graph(bmi)
        
    except ValueError as e:
        messagebox.showerror("Input Error", str(e))

def display_bmi_graph(bmi):
    canvas.delete("all")
    categories = ["Underweight", "Normal", "Overweight", "Obesity"]
    colors = ["#ADD8E6", "#90EE90", "#FFD700", "#FF6347"]
    thresholds = [18.5, 24.9, 29.9, 40]
    
    start_x = 0
    for limit, color in zip(thresholds, colors):
        width = (limit / 40) * 300 - start_x
        canvas.create_rectangle(start_x, 0, start_x + width, 30, fill=color, outline="")
        start_x += width

    bmi_x = (bmi / 40) * 300
    canvas.create_line(bmi_x, 0, bmi_x, 30, fill="black", width=2)

# GUI Setup
root = tk.Tk()
root.title("BMI Calculator")
root.geometry("400x300")

input_frame = ttk.Frame(root, padding="10")
input_frame.grid(row=0, column=0, sticky=(tk.W, tk.E))
button_frame = ttk.Frame(root, padding="10")
button_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
result_frame = ttk.Frame(root, padding="10")
result_frame.grid(row=2, column=0, sticky=(tk.W, tk.E))

# Input fields
def create_label_entry(frame, text, row):
    ttk.Label(frame, text=f"{text}:").grid(row=row, column=0, pady=5)
    entry = ttk.Entry(frame)
    entry.grid(row=row, column=1, sticky=(tk.W, tk.E))
    return entry

name_entry = create_label_entry(input_frame, "Name", 0)
weight_entry = create_label_entry(input_frame, "Weight", 1)
height_entry = create_label_entry(input_frame, "Height", 2)

# Units
weight_unit, height_unit = tk.StringVar(value="kg"), tk.StringVar(value="m")
unit_options = [("kg", "lbs"), ("m", "cm", "in")]

for i, options in enumerate(unit_options):
    for j, opt in enumerate(options):
        ttk.Radiobutton(input_frame, text=opt, variable=(weight_unit if i == 0 else height_unit), value=opt).grid(row=i+1, column=j+2)

# Buttons
ttk.Button(button_frame, text="Calculate BMI", command=calculate_and_display_bmi).grid(row=0, column=0)
ttk.Button(button_frame, text="Save Log", command=save_log_file).grid(row=0, column=1)
ttk.Button(button_frame, text="Clear Log", command=lambda: open("bmi_log.txt", "w").close()).grid(row=0, column=2)

# Result and Graph
result_label = ttk.Label(result_frame, text="", font=("Helvetica", 12))
result_label.grid(row=0, column=0, pady=10)
canvas = tk.Canvas(result_frame, width=300, height=30)
canvas.grid(row=1, column=0, pady=10)

# Profile Combo
ttk.Label(input_frame, text="Profile:").grid(row=3, column=0)
profile_combo = ttk.Combobox(input_frame)
profile_combo.grid(row=3, column=1, sticky=(tk.W, tk.E))

# Initialize the app
update_profile_list()
root.mainloop()

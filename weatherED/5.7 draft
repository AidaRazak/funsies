import random
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import logging

logging.basicConfig(level=logging.INFO)


class WeatherSystem:
    CONDITIONS: Dict[str, Tuple[str, str]] = {
        "Sunny": ("Clear sky and bright sunshine.", "Enjoy the weather but stay hydrated."),
        "Cloudy": ("Overcast skies with no precipitation.", "No significant alerts."),
        "Rainy": ("Rainfall expected, carry an umbrella.", "Flooding possible in low-lying areas."),
        "Snowy": ("Snowfall likely, roads may be slippery.", "Travel may be hazardous."),
        "Windy": ("Strong winds, hold onto your hat.", "Secure loose objects outside."),
        "Stormy": ("Thunderstorms expected, stay indoors.", "Severe weather warning in effect."),
        "Foggy": ("Low visibility due to fog.", "Drive carefully and use fog lights.")
    }

    def __init__(self, location: str = "Unknown", units: str = "metric") -> None:
        self.location = location
        self.date_time = datetime.now()
        self.units = units
        self.data = self._generate_weather_data()
        self.history = []

    def _generate_random_value(self, min_val: float, max_val: float) -> float:
        return round(random.uniform(min_val, max_val), 1)

    def _generate_weather_data(self) -> Dict[str, float]:
        """Generates all weather data at once, ensuring valid ranges."""
        try:
            weather_data = {
                "temperature": self._generate_random_value(-10, 35),
                "humidity": self._generate_random_value(10, 100),
                "wind_speed": self._generate_random_value(0, 25),
                "precipitation_chance": self._generate_random_value(0, 100),
                "uv_index": random.randint(0, 11),
                "aqi": random.randint(0, 500),
                "condition": random.choice(list(self.CONDITIONS.keys())),
                "wind_direction": random.choice(["N", "S", "E", "W", "NE", "NW", "SE", "SW"]),
                "visibility": self._generate_random_value(1, 20),  # Visibility in km
                "sunrise": self._calculate_sun_time(is_sunrise=True),
                "sunset": self._calculate_sun_time(is_sunrise=False)
            }
            weather_data["feels_like"] = self.calculate_feels_like(weather_data["temperature"], weather_data["wind_speed"], weather_data["humidity"])
            weather_data["dew_point"] = self.calculate_dew_point(weather_data["temperature"], weather_data["humidity"])
            self._validate_data(weather_data)
            return weather_data
        except ValueError as ve:
            logging.error(f"Data validation error: {ve}")
            raise
        except Exception as e:
            logging.error(f"Error generating weather data: {e}")
            raise

    def _calculate_sun_time(self, is_sunrise: bool = True) -> str:
        """Calculates the sunrise or sunset time based on the current date."""
        base_time = datetime.now().replace(hour=6 if is_sunrise else 18, minute=0)
        offset = timedelta(minutes=random.randint(-30, 30))
        sun_time = base_time + offset
        return sun_time.strftime('%H:%M')

    def _validate_data(self, data: Dict[str, float]) -> None:
        """Validates weather data to ensure it's within acceptable ranges."""
        validators = {
            'temperature': (-10, 35),
            'humidity': (0, 100),
            'wind_speed': (0, 25),
            'precipitation_chance': (0, 100),
            'uv_index': (0, 11),
            'aqi': (0, 500),
            'visibility': (1, 20)
        }
        for key, (min_val, max_val) in validators.items():
            if not (min_val <= data[key] <= max_val):
                raise ValueError(f"{key.capitalize()} out of range: {data[key]} (Expected: {min_val}-{max_val})")

    def calculate_feels_like(self, temp: float, wind_speed: float, humidity: float) -> float:
        """Calculates the feels-like temperature."""
        wind_speed_kph = self.convert_mps_to_kph(wind_speed)

        if temp <= 10 and wind_speed_kph > 4.8:  # Wind Chill for cold weather
            feels_like = 13.12 + 0.6215 * temp - 11.37 * wind_speed_kph**0.16 + 0.3965 * temp * wind_speed_kph**0.16
        elif temp >= 27 and humidity > 40:  # Heat Index for warm weather
            feels_like = -8.784 + 1.611 * temp + 2.338 * humidity - 0.1461 * temp * humidity
        else:
            feels_like = temp

        return round(feels_like, 1)

    def calculate_dew_point(self, temp: float, humidity: float) -> float:
        """Calculates the dew point using the Magnus formula."""
        a, b = 17.27, 237.7
        alpha = ((a * temp) / (b + temp)) + (humidity / 100.0)
        return round((b * alpha) / (a - alpha), 1)

    def display_weather(self) -> None:
        """Displays the current weather data."""
        try:
            condition, alert = self.CONDITIONS[self.data["condition"]]
            temp_unit = "°C" if self.units == "metric" else "°F"
            wind_speed_unit = "m/s" if self.units == "metric" else "mph"

            print(f"Location: {self.location}\nDate and Time: {self.date_time.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"Weather: {self.data['condition']} - {condition}")
            print(f"Temperature: {self.data['temperature']}{temp_unit} ({self.convert_temperature(self.data['temperature'])}°F)")
            print(f"Feels Like: {self.data['feels_like']}{temp_unit}")
            print(f"Dew Point: {self.data['dew_point']}{temp_unit}")
            print(f"Humidity: {self.data['humidity']}%")
            print(f"Wind: {self.data['wind_speed']} {wind_speed_unit} from {self.data['wind_direction']}")
            print(f"Visibility: {self.data['visibility']} km")
            print(f"Precipitation Chance: {self.data['precipitation_chance']}%")
            print(f"UV Index: {self.data['uv_index']}, AQI: {self.data['aqi']}")
            print(f"Sunrise: {self.data['sunrise']}, Sunset: {self.data['sunset']}")
            print(f"Alert: {alert}\n")
        except Exception as e:
            logging.error(f"Error displaying weather: {e}")

    def weather_summary(self) -> None:
        """Provides a brief summary of the weather."""
        try:
            condition_summary = f"{self.data['condition']} with a temperature of {self.data['temperature']}°C " \
                                f"and {self.data['humidity']}% humidity. Wind speed is {self.data['wind_speed']} m/s."
            print(f"Summary: {condition_summary}\n")
        except Exception as e:
            logging.error(f"Error generating weather summary: {e}")

    def generate_forecast(self, days: int = 3) -> None:
        """Generates a weather forecast for the given number of days."""
        print(f"Weather Forecast for {self.location}:\n")
        try:
            for day in range(1, days + 1):
                forecast_date = self.date_time + timedelta(days=day)
                forecast_data = self._generate_weather_data()
                condition, _ = self.CONDITIONS[forecast_data["condition"]]
                print(f"Date: {forecast_date.strftime('%Y-%m-%d')}")
                print(f"Weather: {forecast_data['condition']} - {condition}")
                print(f"Temperature: {forecast_data['temperature']}°C, Humidity: {forecast_data['humidity']}%")
                print(f"Wind Speed: {forecast_data['wind_speed']} m/s, Precipitation Chance: {forecast_data['precipitation_chance']}%")
                print(f"UV Index: {forecast_data['uv_index']}, AQI: {forecast_data['aqi']}")
                print(f"Sunrise: {forecast_data['sunrise']}, Sunset: {forecast_data['sunset']}\n")
        except Exception as e:
            logging.error(f"Error generating forecast: {e}")

    def store_weather_history(self) -> None:
        """Stores the current weather data in the history."""
        try:
            self.history.append({
                "date_time": self.date_time,
                "data": self.data
            })
            logging.info(f"Weather data for {self.date_time.strftime('%Y-%m-%d %H:%M:%S')} stored successfully.")
        except Exception as e:
            logging.error(f"Error storing weather history: {e}")

    def display_weather_history(self) -> None:
        """Displays the stored weather history."""
        if not self.history:
            print("No weather history available.")
        else:
            for record in self.history:
                print(f"Date and Time: {record['date_time'].strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"Weather: {record['data']['condition']}, Temperature: {record['data']['temperature']}°C\n")

    @staticmethod
    def convert_temperature(temp: float, to_fahrenheit: bool = True) -> float:
        """Converts temperature between Celsius and Fahrenheit."""
        return round((temp * 9/5) + 32, 1) if to_fahrenheit else round((temp - 32) * 5/9, 1)

    @staticmethod
    def convert_mps_to_kph(mps: float) -> float:
        """Converts wind speed from meters per second to kilometers per hour."""
        return round(mps * 3.6, 1)


class MultiLocationWeatherSystem:
    def __init__(self, locations: List[str], units: str = "metric") -> None:
        self.weather_systems = [WeatherSystem(location, units) for location in locations]

    def generate_and_display_all_weather(self) -> None:
        """Generates and displays weather for all locations."""
        for ws in self.weather_systems:
            ws.display_weather()
            ws.weather_summary()

    def generate_forecasts_for_all_locations(self, days: int = 3) -> None:
        """Generates forecasts for all locations."""
        for ws in self.weather_systems:
            ws.generate_forecast(days)

    def store_all_weather_histories(self) -> None:
        """Stores weather history for all locations."""
        for ws in self.weather_systems:
            ws.store_weather_history()

    def display_all_weather_histories(self) -> None:
        """Displays weather histories for all locations."""
        for ws in self.weather_systems:
            print(f"Weather history for {ws.location}:")
            ws.display_weather_history()
            print("\n")


# Example usage:
if __name__ == "__main__":
    locations = ["New York", "Los Angeles", "London", "Tokyo"]
    multi_location_weather_system = MultiLocationWeatherSystem(locations)
    multi_location_weather_system.generate_and_display_all_weather()
    multi_location_weather_system.generate_forecasts_for_all_locations(days=5)
    multi_location_weather_system.store_all_weather_histories()
    multi_location_weather_system.display_all_weather_histories()

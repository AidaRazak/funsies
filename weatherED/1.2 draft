import random

class WeatherSystem:
    CONDITIONS = {
        "Sunny": "Clear sky and bright sunshine.",
        "Cloudy": "Overcast skies with no precipitation.",
        "Rainy": "Rainfall is expected, be prepared with an umbrella.",
        "Snowy": "Snow is falling, roads may be slippery."
    }

    def __init__(self):
        self.temperature = 0.0  # in Celsius
        self.humidity = 0.0  # in percentage
        self.wind_speed = 0.0  # in meters per second
        self.current_condition = ""
        self.feels_like_temperature = 0.0  # Calculated based on temperature, humidity, wind

    def _generate_temperature(self):
        """Generate random temperature in Celsius."""
        return round(random.uniform(-10, 30), 1)

    def _generate_humidity(self):
        """Generate random humidity percentage."""
        return round(random.uniform(20, 90), 1)

    def _generate_wind_speed(self):
        """Generate random wind speed in meters per second."""
        return round(random.uniform(0, 20), 1)

    def generate_weather(self):
        """Generate random weather data."""
        self.temperature = self._generate_temperature()
        self.humidity = self._generate_humidity()
        self.wind_speed = self._generate_wind_speed()
        self.current_condition = random.choice(list(self.CONDITIONS.keys()))

        # Calculate feels-like temperature based on wind chill or heat index
        self.feels_like_temperature = self.calculate_feels_like_temperature()

    def calculate_feels_like_temperature(self):
        """Calculate feels-like temperature based on temperature, humidity, and wind."""
        feels_like = self.temperature + (self.wind_speed / 2) - (self.humidity / 3)
        return round(feels_like, 1)

    def display_weather(self):
        """Display the current weather data."""
        print(f"Weather: {self.current_condition}")
        print(f"Description: {self.CONDITIONS[self.current_condition]}")
        print(f"Temperature: {self.temperature}°C")
        print(f"Feels Like: {self.feels_like_temperature}°C")
        print(f"Humidity: {self.humidity}%")
        print(f"Wind Speed: {self.wind_speed} m/s")
        print()

    def suggest_activity(self):
        """Suggest an activity based on current weather conditions."""
        if self.current_condition == "Sunny":
            print("It's sunny! Perfect weather for outdoor activities like hiking or picnicking.")
        elif self.current_condition == "Cloudy":
            print("Cloudy skies, but no rain. Good for a casual walk or outdoor sports.")
        elif self.current_condition == "Rainy":
            print("It's raining. Stay indoors and enjoy a good book or movie.")
        elif self.current_condition == "Snowy":
            print("Snowy weather! Time to build a snowman or have a snowball fight.")
        else:
            print("Weather condition not recognized.")

    def convert_celsius_to_fahrenheit(self, celsius):
        """Convert temperature from Celsius to Fahrenheit."""
        return (celsius * 9/5) + 32

    def convert_fahrenheit_to_celsius(self, fahrenheit):
        """Convert temperature from Fahrenheit to Celsius."""
        return (fahrenheit - 32) * 5/9

# Example usage:
if __name__ == "__main__":
    weather_system = WeatherSystem()
    weather_system.generate_weather()
    weather_system.display_weather()
    weather_system.suggest_activity()

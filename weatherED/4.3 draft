import random
import csv
import json
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

class WeatherSystem:
    CONDITIONS = ["Sunny", "Cloudy", "Rainy", "Snowy", "Windy", "Stormy"]
    SEASONS = {
        "Spring": (5, 20, 50),
        "Summer": (15, 35, 30),
        "Autumn": (0, 15, 60),
        "Winter": (-10, 5, 40)
    }

    def __init__(self):
        self.temperature = 0.0
        self.humidity = 0.0
        self.wind_speed = 0.0
        self.condition = ""
        self.date_time = datetime.now()
        self.historical_data = []

    def _generate_random_value(self, min_val, max_val):
        return round(random.uniform(min_val, max_val), 1)

    def generate_weather(self):
        season = self.get_current_season()
        min_temp, max_temp, rain_chance = self.SEASONS[season]
        self.temperature = self._generate_random_value(min_temp, max_temp)
        self.humidity = self._generate_random_value(10, 100)
        self.wind_speed = self._generate_random_value(0, 25)
        self.condition = random.choice(self.CONDITIONS)
        self.date_time = datetime.now()
        self.historical_data.append({
            "date_time": self.date_time,
            "temperature": self.temperature,
            "humidity": self.humidity,
            "wind_speed": self.wind_speed,
            "condition": self.condition
        })

    def get_current_season(self):
        month = self.date_time.month
        if month in [3, 4, 5]: return "Spring"
        if month in [6, 7, 8]: return "Summer"
        if month in [9, 10, 11]: return "Autumn"
        return "Winter"

    def display_weather(self):
        print(f"Date and Time: {self.date_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Weather: {self.condition}")
        print(f"Temperature: {self.temperature}°C")
        print(f"Humidity: {self.humidity}%")
        print(f"Wind Speed: {self.wind_speed} m/s")

    def save_historical_data_to_csv(self, file_path):
        with open(file_path, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["date_time", "temperature", "humidity", "wind_speed", "condition"])
            for data in self.historical_data:
                writer.writerow([data["date_time"].strftime('%Y-%m-%d %H:%M:%S'), data["temperature"],
                                 data["humidity"], data["wind_speed"], data["condition"]])

    def load_historical_data_from_csv(self, file_path):
        with open(file_path, 'r') as file:
            reader = csv.DictReader(file)
            self.historical_data = []
            for row in reader:
                self.historical_data.append({
                    "date_time": datetime.strptime(row["date_time"], '%Y-%m-%d %H:%M:%S'),
                    "temperature": float(row["temperature"]),
                    "humidity": float(row["humidity"]),
                    "wind_speed": float(row["wind_speed"]),
                    "condition": row["condition"]
                })

    def plot_historical_data(self):
        if not self.historical_data:
            print("No historical data to plot.")
            return
        
        dates = [data["date_time"] for data in self.historical_data]
        temperatures = [data["temperature"] for data in self.historical_data]

        plt.figure(figsize=(10, 5))
        plt.plot(dates, temperatures, label="Temperature (°C)")
        plt.xlabel("Date")
        plt.ylabel("Temperature (°C)")
        plt.title("Historical Temperature")
        plt.legend()
        plt.show()

# Example Usage:
weather_system = WeatherSystem()
weather_system.generate_weather()
weather_system.display_weather()
weather_system.save_historical_data_to_csv('weather_data.csv')
weather_system.load_historical_data_from_csv('weather_data.csv')
weather_system.plot_historical_data()

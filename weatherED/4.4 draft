import random
import csv
import json
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import requests
import os

class WeatherSystem:
    CONDITIONS = ["Sunny", "Cloudy", "Rainy", "Snowy", "Windy", "Stormy"]
    SEASONS = {
        "Spring": (5, 20, 50),
        "Summer": (15, 35, 30),
        "Autumn": (0, 15, 60),
        "Winter": (-10, 5, 40)
    }

    def __init__(self):
        self.temperature = 0.0
        self.humidity = 0.0
        self.wind_speed = 0.0
        self.condition = ""
        self.date_time = datetime.now()
        self.historical_data = []

    def _generate_random_value(self, min_val, max_val):
        return round(random.uniform(min_val, max_val), 1)

    def generate_weather(self):
        season = self.get_current_season()
        min_temp, max_temp, _ = self.SEASONS[season]
        self.temperature = self._generate_random_value(min_temp, max_temp)
        self.humidity = self._generate_random_value(10, 100)
        self.wind_speed = self._generate_random_value(0, 25)
        self.condition = random.choice(self.CONDITIONS)
        self.date_time = datetime.now()
        self.historical_data.append({
            "date_time": self.date_time,
            "temperature": self.temperature,
            "humidity": self.humidity,
            "wind_speed": self.wind_speed,
            "condition": self.condition
        })

    def get_current_season(self):
        month = self.date_time.month
        if month in [3, 4, 5]: return "Spring"
        if month in [6, 7, 8]: return "Summer"
        if month in [9, 10, 11]: return "Autumn"
        return "Winter"

    def display_weather(self):
        print(f"Date and Time: {self.date_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Weather: {self.condition}")
        print(f"Temperature: {self.temperature}°C")
        print(f"Humidity: {self.humidity}%")
        print(f"Wind Speed: {self.wind_speed} m/s")
        print(f"Feels Like: {self.calculate_feels_like_temperature()}°C")

    def calculate_feels_like_temperature(self):
        wind_chill_factor = (self.wind_speed * 3.6) / 2
        humidity_factor = self.humidity / 10
        feels_like = self.temperature - wind_chill_factor + humidity_factor
        return round(feels_like, 1)

    def save_historical_data_to_csv(self, file_path):
        with open(file_path, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["date_time", "temperature", "humidity", "wind_speed", "condition"])
            for data in self.historical_data:
                writer.writerow([data["date_time"].strftime('%Y-%m-%d %H:%M:%S'), data["temperature"],
                                 data["humidity"], data["wind_speed"], data["condition"]])

    def load_historical_data_from_csv(self, file_path):
        with open(file_path, 'r') as file:
            reader = csv.DictReader(file)
            self.historical_data = []
            for row in reader:
                self.historical_data.append({
                    "date_time": datetime.strptime(row["date_time"], '%Y-%m-%d %H:%M:%S'),
                    "temperature": float(row["temperature"]),
                    "humidity": float(row["humidity"]),
                    "wind_speed": float(row["wind_speed"]),
                    "condition": row["condition"]
                })

    def export_historical_data_to_json(self, file_path):
        with open(file_path, 'w') as file:
            json.dump(self.historical_data, file)
        print(f"Historical data exported to {file_path}.")

    def plot_historical_data(self):
        if not self.historical_data:
            print("No historical data to plot.")
            return
        
        dates = [data["date_time"] for data in self.historical_data]
        temperatures = [data["temperature"] for data in self.historical_data]

        plt.figure(figsize=(10, 5))
        plt.plot(dates, temperatures, label="Temperature (°C)")
        plt.xlabel("Date")
        plt.ylabel("Temperature (°C)")
        plt.title("Historical Temperature")
        plt.legend()
        plt.show()

    def analyze_temperature_trend(self, days=7):
        if len(self.historical_data) < days:
            return "Insufficient historical data to analyze trend."
        
        temperatures = [data["temperature"] for data in self.historical_data[-days:]]
        trend = "Increasing" if temperatures[-1] > temperatures[0] else "Decreasing" if temperatures[-1] < temperatures[0] else "Stable"
        return {
            "average_temperature": round(sum(temperatures) / len(temperatures), 1),
            "trend": trend
        }

    def fetch_weather_by_location(self, city):
        api_key = os.getenv('OPENWEATHERMAP_API_KEY')
        if not api_key:
            print("API key not set. Please set the 'OPENWEATHERMAP_API_KEY' environment variable.")
            return

        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid={api_key}'
        
        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            
            self.temperature = data['main']['temp']
            self.humidity = data['main']['humidity']
            self.wind_speed = data['wind']['speed']
            self.condition = data['weather'][0]['main']
            self.date_time = datetime.fromtimestamp(data['dt'])
            self.historical_data.append({
                "date_time": self.date_time,
                "temperature": self.temperature,
                "humidity": self.humidity,
                "wind_speed": self.wind_speed,
                "condition": self.condition
            })
        except requests.exceptions.RequestException as e:
            print(f"Error fetching weather data: {e}")

    def issue_weather_alerts(self):
        alerts = {
            "Stormy": "Severe weather warning: Thunderstorms are expected, stay indoors.",
            "Rainy": "Heavy rain warning: Flooding possible in low-lying areas."
        }
        if self.condition in alerts:
            print(alerts[self.condition])

# Example Usage:
weather_system = WeatherSystem()
weather_system.generate_weather()
weather_system.display_weather()
weather_system.save_historical_data_to_csv('weather_data.csv')
weather_system.load_historical_data_from_csv('weather_data.csv')
weather_system.export_historical_data_to_json('weather_data.json')
weather_system.plot_historical_data()

city = input("Enter city name for weather: ")
weather_system.fetch_weather_by_location(city)
weather_system.display_weather()
weather_system.issue_weather_alerts()

trend = weather_system.analyze_temperature_trend()
print(f"Temperature trend: {trend['trend']}, Average temperature: {trend['average_temperature']}°C")

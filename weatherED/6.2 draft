import random
from datetime import datetime
from typing import List, Dict, Tuple
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import time

class WeatherSystem:
    CONDITIONS: Dict[str, Tuple[str, str]] = {
        "Sunny": ("Clear sky and bright sunshine.", "Enjoy the weather but stay hydrated."),
        "Cloudy": ("Overcast skies with no precipitation.", "No significant alerts."),
        "Rainy": ("Rainfall is expected, be prepared with an umbrella.", "Flooding possible in low-lying areas."),
        "Snowy": ("Snow is falling, roads may be slippery.", "Travel may be hazardous."),
        "Windy": ("Strong winds, hold onto your hat.", "Secure loose objects outside."),
        "Stormy": ("Thunderstorms are expected, stay indoors.", "Severe weather warning in effect."),
        "Foggy": ("Low visibility due to fog.", "Drive carefully and use fog lights.")
    }

    def __init__(self, location: str = "Unknown", forecast_days: int = 1, unit_system: str = "metric") -> None:
        """
        Initialize the WeatherSystem for a specific location.
        """
        self.location = location
        self.date_time = datetime.now()
        self.unit_system = unit_system
        self.data = self._generate_weather_data(days=forecast_days)
        self.history = []

    def _generate_random_value(self, min_val: float, max_val: float) -> float:
        """
        Generate a random floating-point value between min_val and max_val.
        """
        return round(random.uniform(min_val, max_val), 1)

    def _generate_weather_data(self, days: int = 1) -> List[Dict[str, float]]:
        """
        Generates weather data for a number of days.
        """
        weather_forecast = []
        for _ in range(days):
            weather_data = {
                "temperature": self._generate_random_value(-10, 35),
                "humidity": self._generate_random_value(10, 100),
                "wind_speed": self._generate_random_value(0, 25),
                "precipitation_chance": self._generate_random_value(0, 100),
                "uv_index": random.randint(0, 11),
                "aqi": random.randint(0, 500),
                "condition": random.choice(list(self.CONDITIONS.keys())),
            }
            weather_data["feels_like"] = self.calculate_feels_like(
                weather_data["temperature"], weather_data["wind_speed"], weather_data["humidity"]
            )
            weather_data["dew_point"] = self.calculate_dew_point(
                weather_data["temperature"], weather_data["humidity"]
            )
            self._validate_data(weather_data)
            weather_forecast.append(weather_data)
        return weather_forecast

    def _validate_data(self, data: Dict[str, float]) -> None:
        """
        Validates weather data to ensure it's within acceptable ranges.
        """
        if not (-10 <= data['temperature'] <= 35):
            raise ValueError(f"Temperature {data['temperature']}째C out of range.")
        if not (0 <= data['humidity'] <= 100):
            raise ValueError(f"Humidity {data['humidity']}% out of range.")
        if not (0 <= data['wind_speed'] <= 25):
            raise ValueError(f"Wind speed {data['wind_speed']} m/s out of range.")
        if not (0 <= data['precipitation_chance'] <= 100):
            raise ValueError(f"Precipitation chance {data['precipitation_chance']}% out of range.")
        if not (0 <= data['uv_index'] <= 11):
            raise ValueError(f"UV index {data['uv_index']} out of range.")
        if not (0 <= data['aqi'] <= 500):
            raise ValueError(f"AQI {data['aqi']} out of range.")

    def calculate_feels_like(self, temp: float, wind_speed: float, humidity: float) -> float:
        """
        Calculates the feels-like temperature using a more accurate formula.
        """
        wind_speed_kph = self.convert_mps_to_kph(wind_speed)
        feels_like = temp
        if temp <= 10 and wind_speed_kph > 4.8:  # Wind Chill for cold weather
            feels_like = 13.12 + 0.6215 * temp - 11.37 * wind_speed_kph**0.16 + 0.3965 * temp * wind_speed_kph**0.16
        elif temp >= 27 and humidity > 40:  # Heat Index for warm weather
            feels_like = -8.784 + 1.611 * temp + 2.338 * humidity - 0.1461 * temp * humidity
        return round(feels_like, 1)

    def calculate_dew_point(self, temp: float, humidity: float) -> float:
        """
        Calculates the dew point using the Magnus formula.
        """
        a, b = 17.27, 237.7
        alpha = ((a * temp) / (b + temp)) + (humidity / 100.0)
        return round((b * alpha) / (a - alpha), 1)

    def save_to_history(self) -> None:
        """
        Saves the current weather data to history.
        """
        self.history.append({"date_time": self.date_time, "data": self.data})

    def display_history(self) -> None:
        """
        Displays historical weather data.
        """
        print(f"Location: {self.location} Weather History:")
        for record in self.history:
            print(f"Date and Time: {record['date_time'].strftime('%Y-%m-%d %H:%M:%S')}")
            for day_data in record['data']:
                condition, _ = self.CONDITIONS[day_data["condition"]]
                print(f"  Condition: {day_data['condition']} - {condition}")
                print(f"  Temperature: {day_data['temperature']}째C")
            print("-" * 30)

    def update_weather(self) -> None:
        """
        Update the weather data and save the previous data to history.
        """
        self.save_to_history()
        self.data = self._generate_weather_data()

    def display_weather(self) -> None:
        """
        Displays the current weather data or forecast.
        """
        temp_unit = "째C" if self.unit_system == "metric" else "째F"
        wind_unit = "m/s" if self.unit_system == "metric" else "mph"
        
        print(f"Location: {self.location}")
        print(f"Date and Time: {self.date_time.strftime('%Y-%m-%d %H:%M:%S')}")
        for i, data in enumerate(self.data):
            condition, alert = self.CONDITIONS[data["condition"]]
            print(f"Day {i+1}:")
            temp = data['temperature']
            wind_speed = data['wind_speed']
            if self.unit_system == "imperial":
                temp = self.convert_temperature(temp, to_fahrenheit=True)
                wind_speed = self.convert_mps_to_kph(wind_speed) * 0.621371
            print(f"  Weather: {data['condition']} - {condition}")
            print(f"  Temperature: {temp}{temp_unit}")
            print(f"  Feels Like: {data['feels_like']}{temp_unit}")
            print(f"  Wind Speed: {wind_speed:.2f} {wind_unit}")
            print(f"  Humidity: {data['humidity']}%")
            print(f"  Alert: {alert}\n")

    def send_email_alert(self, recipient_email: str) -> None:
        """
        Sends an email alert if the weather is severe.
        """
        if "Severe" in self.CONDITIONS[self.data[0]["condition"]][1]:
            sender_email = "your_email@example.com"
            sender_password = "your_password"
            
            msg = MIMEMultipart()
            msg['From'] = sender_email
            msg['To'] = recipient_email
            msg['Subject'] = f"Weather Alert for {self.location}"

            body = f"Severe weather alert in {self.location}.\n"
            body += f"Condition: {self.data[0]['condition']}\n"
            body += self.CONDITIONS[self.data[0]["condition"]][1]
            msg.attach(MIMEText(body, 'plain'))

            try:
                server = smtplib.SMTP('smtp.example.com', 587)
                server.starttls()
                server.login(sender_email, sender_password)
                text = msg.as_string()
                server.sendmail(sender_email, recipient_email, text)
                server.quit()
                print("Alert sent successfully.")
            except Exception as e:
                print(f"Failed to send alert: {e}")

    def simulate_real_time_updates(self, update_interval: int = 10, total_updates: int = 5) -> None:
        """
        Simulate real-time weather updates by refreshing data at regular intervals.
        """
        for _ in range(total_updates):
            print(f"\n--- Update at {datetime.now().strftime('%H:%M:%S')} ---")
            self.update_weather()
            self.display_weather()
            time.sleep(update_interval)

    @staticmethod
    def convert_temperature(temp: float, to_fahrenheit: bool = True) -> float:
        """
        Converts temperature between Celsius and Fahrenheit.
        """
        return round((temp * 9/5) + 32, 1) if to_fahrenheit else round((temp - 32) * 5/9, 1)

    @staticmethod
    def convert_mps_to_kph(mps: float) -> float:
        """
        Converts meters per second to kilometers per hour.
        """
        return round(mps * 3.6, 2)


class MultiLocationWeatherSystem:
    def __init__(self, locations: List[str], forecast_days: int = 1, unit_system: str = "metric") -> None:
        """
        Initialize the MultiLocationWeatherSystem for multiple locations.
        """
        self.locations = locations
        self.forecast_days = forecast_days
        self.unit_system = unit_system
        self.weather_systems = [WeatherSystem(location, forecast_days, unit_system) for location in locations]

    def display_all_weather(self) -> None:
        """
        Display weather data for all locations.
        """
        for weather_system in self.weather_systems:
            weather_system.display_weather()
            print("=" * 50)

    def simulate_real_time_updates(self, update_interval: int = 10, total_updates: int = 5) -> None:
        """
        Simulate real-time weather updates for all locations.
        """
        for _ in range(total_updates):
            for weather_system in self.weather_systems:
                print(f"\n--- Update at {datetime.now().strftime('%H:%M:%S')} for {weather_system.location} ---")
                weather_system.update_weather()
                weather_system.display_weather()
            time.sleep(update_interval)

# Example usage:
if __name__ == "__main__":
    locations = ["New York", "Los Angeles", "London", "Tokyo"]
    multi_ws = MultiLocationWeatherSystem(locations, forecast_days=3, unit_system="metric")
    multi_ws.display_all_weather()
    multi_ws.simulate_real_time_updates(update_interval=5, total_updates=3)
